From 6692dea5a0df76a54a7c830dd27009ede3506539 Mon Sep 17 00:00:00 2001
From: Sven Strickroth <email@cs-ware.de>
Date: Tue, 3 Mar 2015 17:51:18 +0100
Subject: [PATCH 6/7] Make checking out files behave like vanilla git
 concerning CRLF filter

This also fixes
* files with mixed line endings and AutoCrLf enabled
* core.autocrlf=true and "* text eol=crlf" on LF-only platforms

Signed-off-by: Sven Strickroth <email@cs-ware.de>
Signed-off-by: Sup Yut Sum <ch3cooli@gmail.com>
---
 CHANGELOG.md          |   7 +
 tests/checkout/crlf.c | 960 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 967 insertions(+)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index b22b497..ee7bf69 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -20,6 +20,13 @@ v0.22 + 1
   * especially files containing single CR chars are added as is now
   * honor "text" attribute for forcing a file being interpreted as text
 
+* LF -> CRLF filter now handles files on checkout the way vanilla git does
+  * honor "text" attribute forcing the processing of binary files and eol=crlf processing on LF platforms
+  * skip files containing the same number of LF and CRLF eols
+  * fix binary detection (only apply it for AUTO and GUESS files)
+  * correctly handle files with mixed line endings (CR, LF and also CrLf at the same time and in different combinations)
+  * fix checking out with core.autocrlf=true on LF-only platforms
+
 * Rename and copy detection is enabled for small files.
 
 * Checkout can now handle an initial checkout of a repository, making
diff --git a/tests/checkout/crlf.c b/tests/checkout/crlf.c
index 8e77d08..90d86ea 100644
--- a/tests/checkout/crlf.c
+++ b/tests/checkout/crlf.c
@@ -461,3 +461,963 @@ void test_checkout_crlf__can_write_empty_file(void)
 
 	check_file_contents("./crlf/test3.txt", "");
 }
+
+void test_checkout_crlf__autocrlf_false(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false_index_size_is_unfiltered_size1(void)
+{
+	git_index *index;
+	const git_index_entry *entry;
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	git_repository_index(&index, g_repo);
+
+	cl_assert((entry = git_index_get_bypath(index, "all-lf", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(ALL_LF_TEXT_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "all-crlf", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(ALL_CRLF_TEXT_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "more-lf", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(MORE_LF_TEXT_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "more-crlf", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(MORE_CRLF_TEXT_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "mixed-lf-cr", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(MIXED_LF_CR_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "mixed-lf-cr-crlf", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(MIXED_LF_CR_CRLF_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "binary-all-lf", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(BINARY_ALL_LF_TEXT_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "binary-all-crlf", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(BINARY_ALL_CRLF_TEXT_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "binary-mixed-lf-cr", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(BINARY_MIXED_LF_CR_RAW));
+
+	cl_assert((entry = git_index_get_bypath(index, "binary-mixed-lf-cr-crlf", 0)) != NULL);
+	cl_assert(entry->file_size == strlen(BINARY_MIXED_LF_CR_CRLF_RAW));
+
+	git_index_free(index);
+}
+
+void test_checkout_crlf__autocrlf_true(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_true_index_size_is_filtered_size1(void)
+{
+	git_index *index;
+	const git_index_entry *entry;
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	git_repository_index(&index, g_repo);
+
+	cl_assert((entry = git_index_get_bypath(index, "all-lf", 0)) != NULL);
+	cl_assert_equal_sz(strlen(ALL_LF_TEXT_AS_CRLF), entry->file_size);
+
+	cl_assert((entry = git_index_get_bypath(index, "all-crlf", 0)) != NULL);
+	cl_assert_equal_sz(strlen(ALL_CRLF_TEXT_RAW), entry->file_size);
+
+	git_index_free(index);
+}
+
+void test_checkout_crlf__autocrlf_input(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false__text_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	if (GIT_EOL_NATIVE == GIT_EOL_CRLF) {
+		check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+		check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+		check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+		check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+		check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+		check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+	} else {
+		check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+		check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+		check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+		check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+		check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+		check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+		check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+		check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+		check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+		check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+	}
+}
+
+void test_checkout_crlf__autocrlf_true__text_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_input__text_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false__text_auto_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	if (GIT_EOL_NATIVE == GIT_EOL_CRLF) {
+		check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+		check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+	} else {
+		check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+		check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+		check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+		check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+	}
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_true__text_auto_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_input__text_auto_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false__text__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text eol=crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_true__text__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text eol=crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_input__text__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text eol=crlf\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_false__text__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text eol=lf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_true__text__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text eol=lf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_input__text__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text eol=lf\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* eol=lf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_true__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* eol=lf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_input__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* eol=lf\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* eol=crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_true__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* eol=crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_input__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* eol=crlf\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_false__crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	if (GIT_EOL_NATIVE == GIT_EOL_LF) {
+		check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+		check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+		check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+		check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+		check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+		check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+		check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+		check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+		check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+	} else {
+		check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+		check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+		check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+		check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+		check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+		check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+		check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+	}
+}
+
+void test_checkout_crlf__autocrlf_true__crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_input__crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* crlf\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false__no_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* -crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_true__no_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* -crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_input__no_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* -crlf\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false__text_auto__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto eol=lf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", false);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_true__text_auto__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto eol=lf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_input__text_auto__eol_lf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto eol=lf\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_RAW);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_RAW);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_RAW);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_RAW);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_RAW);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_RAW);
+}
+
+void test_checkout_crlf__autocrlf_false_text_auto__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto eol=crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_true_text_auto__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto eol=crlf\n");
+
+	cl_repo_set_bool(g_repo, "core.autocrlf", true);
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+void test_checkout_crlf__autocrlf_input_text_auto__eol_crlf_attr(void)
+{
+	git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;
+	opts.checkout_strategy = GIT_CHECKOUT_FORCE;
+
+	cl_git_mkfile("./crlf/.gitattributes", "* text=auto eol=crlf\n");
+
+	cl_repo_set_string(g_repo, "core.autocrlf", "input");
+
+	git_checkout_head(g_repo, &opts);
+
+	check_file_contents("./crlf/all-lf", ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/all-crlf", ALL_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/more-lf", MORE_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/more-crlf", MORE_CRLF_TEXT_AS_CRLF);
+
+	check_file_contents("./crlf/mixed-lf-cr", MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/mixed-lf-cr-crlf", MIXED_LF_CR_CRLF_AS_CRLF);
+
+	check_file_contents("./crlf/binary-all-lf", BINARY_ALL_LF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-all-crlf", BINARY_ALL_CRLF_TEXT_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr", BINARY_MIXED_LF_CR_AS_CRLF);
+	check_file_contents("./crlf/binary-mixed-lf-cr-crlf", BINARY_MIXED_LF_CR_CRLF_AS_CRLF);
+}
+
+////////
-- 
1.8.1.2

